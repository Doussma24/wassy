'use strict';

var camelcaseKeys = require('camelcase-keys');
var index = require('../consts/index.cjs');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var camelcaseKeys__default = /*#__PURE__*/_interopDefault(camelcaseKeys);

const fetchTokenByAuthorizationCode = async ({ clientId, tokenEndpoint, redirectUri, codeVerifier, code, resource, }, requester) => {
    const parameters = new URLSearchParams();
    parameters.append(index.QueryKey.ClientId, clientId);
    parameters.append(index.QueryKey.Code, code);
    parameters.append(index.QueryKey.CodeVerifier, codeVerifier);
    parameters.append(index.QueryKey.RedirectUri, redirectUri);
    parameters.append(index.QueryKey.GrantType, index.TokenGrantType.AuthorizationCode);
    if (resource) {
        parameters.append(index.QueryKey.Resource, resource);
    }
    const snakeCaseCodeTokenResponse = await requester(tokenEndpoint, {
        method: 'POST',
        headers: index.ContentType.formUrlEncoded,
        body: parameters.toString(),
    });
    return camelcaseKeys__default.default(snakeCaseCodeTokenResponse);
};
/**
 * Fetch access token by refresh token using the token endpoint and `refresh_token` grant type.
 * @param params The parameters for fetching access token.
 * @param requester The requester for sending HTTP request.
 * @returns A Promise that resolves to the access token response.
 */
const fetchTokenByRefreshToken = async (params, requester) => {
    const { clientId, tokenEndpoint, refreshToken, resource, organizationId, scopes } = params;
    const parameters = new URLSearchParams();
    parameters.append(index.QueryKey.ClientId, clientId);
    parameters.append(index.QueryKey.RefreshToken, refreshToken);
    parameters.append(index.QueryKey.GrantType, index.TokenGrantType.RefreshToken);
    if (resource) {
        parameters.append(index.QueryKey.Resource, resource);
    }
    if (organizationId) {
        parameters.append(index.QueryKey.OrganizationId, organizationId);
    }
    if (scopes?.length) {
        parameters.append(index.QueryKey.Scope, scopes.join(' '));
    }
    const snakeCaseRefreshTokenTokenResponse = await requester(tokenEndpoint, {
        method: 'POST',
        headers: index.ContentType.formUrlEncoded,
        body: parameters.toString(),
    });
    return camelcaseKeys__default.default(snakeCaseRefreshTokenTokenResponse);
};

exports.fetchTokenByAuthorizationCode = fetchTokenByAuthorizationCode;
exports.fetchTokenByRefreshToken = fetchTokenByRefreshToken;
