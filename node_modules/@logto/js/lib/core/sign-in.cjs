'use strict';

var index = require('../consts/index.cjs');
var scopes = require('../utils/scopes.cjs');

const codeChallengeMethod = 'S256';
const responseType = 'code';
const buildPrompt = (prompt) => {
    if (Array.isArray(prompt)) {
        return prompt.join(' ');
    }
    return prompt ?? index.Prompt.Consent;
};
// eslint-disable-next-line complexity
const generateSignInUri = ({ authorizationEndpoint, clientId, redirectUri, codeChallenge, state, scopes: scopes$1, resources, prompt, firstScreen, identifiers: identifier, interactionMode, loginHint, directSignIn, extraParams, includeReservedScopes = true, }) => {
    const urlSearchParameters = new URLSearchParams({
        [index.QueryKey.ClientId]: clientId,
        [index.QueryKey.RedirectUri]: redirectUri,
        [index.QueryKey.CodeChallenge]: codeChallenge,
        [index.QueryKey.CodeChallengeMethod]: codeChallengeMethod,
        [index.QueryKey.State]: state,
        [index.QueryKey.ResponseType]: responseType,
        [index.QueryKey.Prompt]: buildPrompt(prompt),
    });
    const computedScopes = includeReservedScopes ? scopes.withReservedScopes(scopes$1) : scopes$1?.join(' ');
    if (computedScopes) {
        urlSearchParameters.append(index.QueryKey.Scope, computedScopes);
    }
    if (loginHint) {
        urlSearchParameters.append(index.QueryKey.LoginHint, loginHint);
    }
    if (directSignIn) {
        urlSearchParameters.append(index.QueryKey.DirectSignIn, `${directSignIn.method}:${directSignIn.target}`);
    }
    for (const resource of resources ?? []) {
        urlSearchParameters.append(index.QueryKey.Resource, resource);
    }
    if (firstScreen) {
        urlSearchParameters.append(index.QueryKey.FirstScreen, firstScreen);
    }
    // @deprecated Remove later
    else if (interactionMode) {
        urlSearchParameters.append(index.QueryKey.InteractionMode, interactionMode);
    }
    if (identifier && identifier.length > 0) {
        urlSearchParameters.append(index.QueryKey.Identifier, identifier.join(' '));
    }
    if (extraParams) {
        for (const [key, value] of Object.entries(extraParams)) {
            urlSearchParameters.append(key, value);
        }
    }
    return `${authorizationEndpoint}?${urlSearchParameters.toString()}`;
};

exports.generateSignInUri = generateSignInUri;
