'use strict';

var openid = require('./openid.cjs');

const ContentType = {
    formUrlEncoded: { 'Content-Type': 'application/x-www-form-urlencoded' },
};
exports.TokenGrantType = void 0;
(function (TokenGrantType) {
    TokenGrantType["AuthorizationCode"] = "authorization_code";
    TokenGrantType["RefreshToken"] = "refresh_token";
})(exports.TokenGrantType || (exports.TokenGrantType = {}));
exports.QueryKey = void 0;
(function (QueryKey) {
    QueryKey["ClientId"] = "client_id";
    QueryKey["Code"] = "code";
    QueryKey["CodeChallenge"] = "code_challenge";
    QueryKey["CodeChallengeMethod"] = "code_challenge_method";
    QueryKey["CodeVerifier"] = "code_verifier";
    QueryKey["Error"] = "error";
    QueryKey["ErrorDescription"] = "error_description";
    QueryKey["GrantType"] = "grant_type";
    QueryKey["IdToken"] = "id_token";
    QueryKey["IdTokenHint"] = "id_token_hint";
    QueryKey["LoginHint"] = "login_hint";
    QueryKey["PostLogoutRedirectUri"] = "post_logout_redirect_uri";
    QueryKey["Prompt"] = "prompt";
    QueryKey["RedirectUri"] = "redirect_uri";
    QueryKey["RefreshToken"] = "refresh_token";
    QueryKey["Resource"] = "resource";
    QueryKey["ResponseType"] = "response_type";
    QueryKey["Scope"] = "scope";
    QueryKey["State"] = "state";
    QueryKey["Token"] = "token";
    // Need to align with the OIDC extraParams settings in core
    QueryKey["InteractionMode"] = "interaction_mode";
    /** The query key for specifying the organization ID. */
    QueryKey["OrganizationId"] = "organization_id";
    QueryKey["FirstScreen"] = "first_screen";
    QueryKey["Identifier"] = "identifier";
    QueryKey["DirectSignIn"] = "direct_sign_in";
})(exports.QueryKey || (exports.QueryKey = {}));
/** The prompt parameter to be used for the authorization request. */
exports.Prompt = void 0;
(function (Prompt) {
    Prompt["None"] = "none";
    /**
     * The Authorization Server MUST prompt the End-User for consent
     * before returning information to the Client.
     */
    Prompt["Consent"] = "consent";
    /**
     * The Authorization Server MUST prompt the End-User for re-authentication,
     * forcing the user to log in again. Note the there'll be no Refresh Token
     * returned in this case.
     */
    Prompt["Login"] = "login";
})(exports.Prompt || (exports.Prompt = {}));

Object.defineProperty(exports, "ReservedResource", {
    enumerable: true,
    get: function () { return openid.ReservedResource; }
});
Object.defineProperty(exports, "ReservedScope", {
    enumerable: true,
    get: function () { return openid.ReservedScope; }
});
Object.defineProperty(exports, "UserScope", {
    enumerable: true,
    get: function () { return openid.UserScope; }
});
exports.buildOrganizationUrn = openid.buildOrganizationUrn;
exports.getOrganizationIdFromUrn = openid.getOrganizationIdFromUrn;
exports.idTokenClaims = openid.idTokenClaims;
exports.organizationUrnPrefix = openid.organizationUrnPrefix;
exports.userClaims = openid.userClaims;
exports.userinfoClaims = openid.userinfoClaims;
exports.ContentType = ContentType;
