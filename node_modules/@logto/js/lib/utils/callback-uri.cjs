'use strict';

var essentials = require('@silverhand/essentials');
var index = require('../consts/index.cjs');
var errors = require('./errors.cjs');

const parseUriParameters = (uri) => {
    const [, queryString = ''] = uri.split('?');
    return new URLSearchParams(queryString);
};
const verifyAndParseCodeFromCallbackUri = (callbackUri, redirectUri, state) => {
    if (!callbackUri.startsWith(redirectUri)) {
        throw new errors.LogtoError('callback_uri_verification.redirect_uri_mismatched');
    }
    const uriParameters = parseUriParameters(callbackUri);
    const error = essentials.conditional(uriParameters.get(index.QueryKey.Error));
    const errorDescription = essentials.conditional(uriParameters.get(index.QueryKey.ErrorDescription));
    if (error) {
        throw new errors.LogtoError('callback_uri_verification.error_found', new errors.OidcError(error, errorDescription));
    }
    const stateFromCallbackUri = uriParameters.get(index.QueryKey.State);
    if (!stateFromCallbackUri) {
        throw new errors.LogtoError('callback_uri_verification.missing_state');
    }
    if (stateFromCallbackUri !== state) {
        throw new errors.LogtoError('callback_uri_verification.state_mismatched');
    }
    const code = uriParameters.get(index.QueryKey.Code);
    if (!code) {
        throw new errors.LogtoError('callback_uri_verification.missing_code');
    }
    return code;
};

exports.parseUriParameters = parseUriParameters;
exports.verifyAndParseCodeFromCallbackUri = verifyAndParseCodeFromCallbackUri;
