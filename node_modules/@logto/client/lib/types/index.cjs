'use strict';

var js = require('@logto/js');
var essentials = require('@silverhand/essentials');

/**
 * Normalize the Logto client configuration per the following rules:
 *
 * - Add default scopes (`openid`, `offline_access` and `profile`) if not provided and
 * `includeReservedScopes` is `true`.
 * - Add {@link ReservedResource.Organization} to resources if {@link UserScope.Organizations} is
 * included in scopes.
 *
 * @param config The Logto client configuration to be normalized.
 * @returns The normalized Logto client configuration.
 */
const normalizeLogtoConfig = (config) => {
    const { prompt = js.Prompt.Consent, scopes = [], resources, ...rest } = config;
    const includeReservedScopes = config.includeReservedScopes ?? true;
    return {
        ...rest,
        prompt,
        scopes: includeReservedScopes ? js.withReservedScopes(scopes).split(' ') : scopes,
        resources: scopes.includes(js.UserScope.Organizations)
            ? essentials.deduplicate([...(resources ?? []), js.ReservedResource.Organization])
            : resources,
    };
};
const isLogtoSignInSessionItem = (data) => {
    if (!js.isArbitraryObject(data)) {
        return false;
    }
    return ['redirectUri', 'codeVerifier', 'state'].every((key) => typeof data[key] === 'string');
};
const isLogtoAccessTokenMap = (data) => {
    if (!js.isArbitraryObject(data)) {
        return false;
    }
    return Object.values(data).every((value) => {
        if (!js.isArbitraryObject(value)) {
            return false;
        }
        return (typeof value.token === 'string' &&
            typeof value.scope === 'string' &&
            typeof value.expiresAt === 'number');
    });
};

exports.isLogtoAccessTokenMap = isLogtoAccessTokenMap;
exports.isLogtoSignInSessionItem = isLogtoSignInSessionItem;
exports.normalizeLogtoConfig = normalizeLogtoConfig;
